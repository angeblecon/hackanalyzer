"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/css-what";
exports.ids = ["vendor-chunks/css-what"];
exports.modules = {

/***/ "(rsc)/../../../node_modules/css-what/lib/commonjs/index.js":
/*!************************************************************!*\
  !*** ../../../node_modules/css-what/lib/commonjs/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.stringify = exports.parse = exports.isTraversal = void 0;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/../../../node_modules/css-what/lib/commonjs/types.js\"), exports);\nvar parse_1 = __webpack_require__(/*! ./parse */ \"(rsc)/../../../node_modules/css-what/lib/commonjs/parse.js\");\nObject.defineProperty(exports, \"isTraversal\", ({\n    enumerable: true,\n    get: function() {\n        return parse_1.isTraversal;\n    }\n}));\nObject.defineProperty(exports, \"parse\", ({\n    enumerable: true,\n    get: function() {\n        return parse_1.parse;\n    }\n}));\nvar stringify_1 = __webpack_require__(/*! ./stringify */ \"(rsc)/../../../node_modules/css-what/lib/commonjs/stringify.js\");\nObject.defineProperty(exports, \"stringify\", ({\n    enumerable: true,\n    get: function() {\n        return stringify_1.stringify;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy13aGF0L2xpYi9jb21tb25qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REwsaUJBQWlCLEdBQUdBLGFBQWEsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUMvREQsYUFBYVUsbUJBQU9BLENBQUMsMkVBQVMsR0FBR1Q7QUFDakMsSUFBSVUsVUFBVUQsbUJBQU9BLENBQUMsMkVBQVM7QUFDL0J6QiwrQ0FBOEM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT2EsUUFBUUYsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JIeEIseUNBQXdDO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9hLFFBQVFILEtBQUs7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN6RyxJQUFJSSxjQUFjRixtQkFBT0EsQ0FBQyxtRkFBYTtBQUN2Q3pCLDZDQUE0QztJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPYyxZQUFZTCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraGFydmFyZC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLXdoYXQvbGliL2NvbW1vbmpzL2luZGV4LmpzPzA2MmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gZXhwb3J0cy5wYXJzZSA9IGV4cG9ydHMuaXNUcmF2ZXJzYWwgPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xudmFyIHBhcnNlXzEgPSByZXF1aXJlKFwiLi9wYXJzZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVHJhdmVyc2FsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZV8xLmlzVHJhdmVyc2FsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhcnNlXzEucGFyc2U7IH0gfSk7XG52YXIgc3RyaW5naWZ5XzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0cmluZ2lmeV8xLnN0cmluZ2lmeTsgfSB9KTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwic3RyaW5naWZ5IiwicGFyc2UiLCJpc1RyYXZlcnNhbCIsInJlcXVpcmUiLCJwYXJzZV8xIiwic3RyaW5naWZ5XzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../../node_modules/css-what/lib/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/../../../node_modules/css-what/lib/commonjs/parse.js":
/*!************************************************************!*\
  !*** ../../../node_modules/css-what/lib/commonjs/parse.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parse = exports.isTraversal = void 0;\nvar types_1 = __webpack_require__(/*! ./types */ \"(rsc)/../../../node_modules/css-what/lib/commonjs/types.js\");\nvar reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nvar actionTypes = new Map([\n    [\n        126 /* Tilde */ ,\n        types_1.AttributeAction.Element\n    ],\n    [\n        94 /* Circumflex */ ,\n        types_1.AttributeAction.Start\n    ],\n    [\n        36 /* Dollar */ ,\n        types_1.AttributeAction.End\n    ],\n    [\n        42 /* Asterisk */ ,\n        types_1.AttributeAction.Any\n    ],\n    [\n        33 /* ExclamationMark */ ,\n        types_1.AttributeAction.Not\n    ],\n    [\n        124 /* Pipe */ ,\n        types_1.AttributeAction.Hyphen\n    ]\n]);\n// Pseudos, whose data property is parsed as well.\nvar unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\"\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */ function isTraversal(selector) {\n    switch(selector.type){\n        case types_1.SelectorType.Adjacent:\n        case types_1.SelectorType.Child:\n        case types_1.SelectorType.Descendant:\n        case types_1.SelectorType.Parent:\n        case types_1.SelectorType.Sibling:\n        case types_1.SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nexports.isTraversal = isTraversal;\nvar stripQuotesFromPseudos = new Set([\n    \"contains\",\n    \"icontains\"\n]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    var high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */  || c === 34 /* DoubleQuote */ ;\n}\nfunction isWhitespace(c) {\n    return c === 32 /* Space */  || c === 9 /* Tab */  || c === 10 /* NewLine */  || c === 12 /* FormFeed */  || c === 13 /* CarriageReturn */ ;\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */ function parse(selector) {\n    var subselects = [];\n    var endIndex = parseSelector(subselects, \"\".concat(selector), 0);\n    if (endIndex < selector.length) {\n        throw new Error(\"Unmatched selector: \".concat(selector.slice(endIndex)));\n    }\n    return subselects;\n}\nexports.parse = parse;\nfunction parseSelector(subselects, selector, selectorIndex) {\n    var tokens = [];\n    function getName(offset) {\n        var match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(\"Expected name, found \".concat(selector.slice(selectorIndex)));\n        }\n        var name = match[0];\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while(selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))){\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        var start = selectorIndex;\n        var counter = 1;\n        for(; counter > 0 && selectorIndex < selector.length; selectorIndex++){\n            if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  && !isEscaped(selectorIndex)) {\n                counter++;\n            } else if (selector.charCodeAt(selectorIndex) === 41 /* RightParenthesis */  && !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        var slashCount = 0;\n        while(selector.charCodeAt(--pos) === 92 /* BackSlash */ )slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({\n            type: type\n        });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: types_1.SelectorType.Attribute,\n            name: name,\n            action: action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\"\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */ function finalizeSubselector() {\n        if (tokens.length && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while(selectorIndex < selector.length){\n        var firstChar = selector.charCodeAt(selectorIndex);\n        switch(firstChar){\n            // Whitespace\n            case 32 /* Space */ :\n            case 9 /* Tab */ :\n            case 10 /* NewLine */ :\n            case 12 /* FormFeed */ :\n            case 13 /* CarriageReturn */ :\n                {\n                    if (tokens.length === 0 || tokens[0].type !== types_1.SelectorType.Descendant) {\n                        ensureNotTraversal();\n                        tokens.push({\n                            type: types_1.SelectorType.Descendant\n                        });\n                    }\n                    stripWhitespace(1);\n                    break;\n                }\n            // Traversals\n            case 62 /* GreaterThan */ :\n                {\n                    addTraversal(types_1.SelectorType.Child);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 60 /* LessThan */ :\n                {\n                    addTraversal(types_1.SelectorType.Parent);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 126 /* Tilde */ :\n                {\n                    addTraversal(types_1.SelectorType.Sibling);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 43 /* Plus */ :\n                {\n                    addTraversal(types_1.SelectorType.Adjacent);\n                    stripWhitespace(1);\n                    break;\n                }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */ :\n                {\n                    addSpecialAttribute(\"class\", types_1.AttributeAction.Element);\n                    break;\n                }\n            case 35 /* Hash */ :\n                {\n                    addSpecialAttribute(\"id\", types_1.AttributeAction.Equals);\n                    break;\n                }\n            case 91 /* LeftSquareBracket */ :\n                {\n                    stripWhitespace(1);\n                    // Determine attribute name and namespace\n                    var name_1 = void 0;\n                    var namespace = null;\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ ) {\n                        // Equivalent to no namespace\n                        name_1 = getName(1);\n                    } else if (selector.startsWith(\"*|\", selectorIndex)) {\n                        namespace = \"*\";\n                        name_1 = getName(2);\n                    } else {\n                        name_1 = getName(0);\n                        if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            namespace = name_1;\n                            name_1 = getName(1);\n                        }\n                    }\n                    stripWhitespace(0);\n                    // Determine comparison operation\n                    var action = types_1.AttributeAction.Exists;\n                    var possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                    if (possibleAction) {\n                        action = possibleAction;\n                        if (selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            throw new Error(\"Expected `=`\");\n                        }\n                        stripWhitespace(2);\n                    } else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */ ) {\n                        action = types_1.AttributeAction.Equals;\n                        stripWhitespace(1);\n                    }\n                    // Determine value\n                    var value = \"\";\n                    var ignoreCase = null;\n                    if (action !== \"exists\") {\n                        if (isQuote(selector.charCodeAt(selectorIndex))) {\n                            var quote = selector.charCodeAt(selectorIndex);\n                            var sectionEnd = selectorIndex + 1;\n                            while(sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))){\n                                sectionEnd += 1;\n                            }\n                            if (selector.charCodeAt(sectionEnd) !== quote) {\n                                throw new Error(\"Attribute value didn't end\");\n                            }\n                            value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                            selectorIndex = sectionEnd + 1;\n                        } else {\n                            var valueStart = selectorIndex;\n                            while(selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */  || isEscaped(selectorIndex))){\n                                selectorIndex += 1;\n                            }\n                            value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                        }\n                        stripWhitespace(0);\n                        // See if we have a force ignore flag\n                        var forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                        // If the forceIgnore flag is set (either `i` or `s`), use that value\n                        if (forceIgnore === 115 /* LowerS */ ) {\n                            ignoreCase = false;\n                            stripWhitespace(1);\n                        } else if (forceIgnore === 105 /* LowerI */ ) {\n                            ignoreCase = true;\n                            stripWhitespace(1);\n                        }\n                    }\n                    if (selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */ ) {\n                        throw new Error(\"Attribute selector didn't terminate\");\n                    }\n                    selectorIndex += 1;\n                    var attributeSelector = {\n                        type: types_1.SelectorType.Attribute,\n                        name: name_1,\n                        action: action,\n                        value: value,\n                        namespace: namespace,\n                        ignoreCase: ignoreCase\n                    };\n                    tokens.push(attributeSelector);\n                    break;\n                }\n            case 58 /* Colon */ :\n                {\n                    if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */ ) {\n                        tokens.push({\n                            type: types_1.SelectorType.PseudoElement,\n                            name: getName(2).toLowerCase(),\n                            data: selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  ? readValueWithParenthesis() : null\n                        });\n                        continue;\n                    }\n                    var name_2 = getName(1).toLowerCase();\n                    var data = null;\n                    if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */ ) {\n                        if (unpackPseudos.has(name_2)) {\n                            if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                                throw new Error(\"Pseudo-selector \".concat(name_2, \" cannot be quoted\"));\n                            }\n                            data = [];\n                            selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                            if (selector.charCodeAt(selectorIndex) !== 41 /* RightParenthesis */ ) {\n                                throw new Error(\"Missing closing parenthesis in :\".concat(name_2, \" (\").concat(selector, \")\"));\n                            }\n                            selectorIndex += 1;\n                        } else {\n                            data = readValueWithParenthesis();\n                            if (stripQuotesFromPseudos.has(name_2)) {\n                                var quot = data.charCodeAt(0);\n                                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {\n                                    data = data.slice(1, -1);\n                                }\n                            }\n                            data = unescapeCSS(data);\n                        }\n                    }\n                    tokens.push({\n                        type: types_1.SelectorType.Pseudo,\n                        name: name_2,\n                        data: data\n                    });\n                    break;\n                }\n            case 44 /* Comma */ :\n                {\n                    finalizeSubselector();\n                    tokens = [];\n                    stripWhitespace(1);\n                    break;\n                }\n            default:\n                {\n                    if (selector.startsWith(\"/*\", selectorIndex)) {\n                        var endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                        if (endIndex < 0) {\n                            throw new Error(\"Comment was not terminated\");\n                        }\n                        selectorIndex = endIndex + 2;\n                        // Remove leading whitespace\n                        if (tokens.length === 0) {\n                            stripWhitespace(0);\n                        }\n                        break;\n                    }\n                    var namespace = null;\n                    var name_3 = void 0;\n                    if (firstChar === 42 /* Asterisk */ ) {\n                        selectorIndex += 1;\n                        name_3 = \"*\";\n                    } else if (firstChar === 124 /* Pipe */ ) {\n                        name_3 = \"\";\n                        if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */ ) {\n                            addTraversal(types_1.SelectorType.ColumnCombinator);\n                            stripWhitespace(2);\n                            break;\n                        }\n                    } else if (reName.test(selector.slice(selectorIndex))) {\n                        name_3 = getName(0);\n                    } else {\n                        break loop;\n                    }\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */ ) {\n                        namespace = name_3;\n                        if (selector.charCodeAt(selectorIndex + 1) === 42 /* Asterisk */ ) {\n                            name_3 = \"*\";\n                            selectorIndex += 2;\n                        } else {\n                            name_3 = getName(1);\n                        }\n                    }\n                    tokens.push(name_3 === \"*\" ? {\n                        type: types_1.SelectorType.Universal,\n                        namespace: namespace\n                    } : {\n                        type: types_1.SelectorType.Tag,\n                        name: name_3,\n                        namespace: namespace\n                    });\n                }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../node_modules/css-what/lib/commonjs/parse.js\n");

/***/ }),

/***/ "(rsc)/../../../node_modules/css-what/lib/commonjs/stringify.js":
/*!****************************************************************!*\
  !*** ../../../node_modules/css-what/lib/commonjs/stringify.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.stringify = void 0;\nvar types_1 = __webpack_require__(/*! ./types */ \"(rsc)/../../../node_modules/css-what/lib/commonjs/types.js\");\nvar attribValChars = [\n    \"\\\\\",\n    '\"'\n];\nvar pseudoValChars = __spreadArray(__spreadArray([], attribValChars, true), [\n    \"(\",\n    \")\"\n], false);\nvar charsToEscapeInAttributeValue = new Set(attribValChars.map(function(c) {\n    return c.charCodeAt(0);\n}));\nvar charsToEscapeInPseudoValue = new Set(pseudoValChars.map(function(c) {\n    return c.charCodeAt(0);\n}));\nvar charsToEscapeInName = new Set(__spreadArray(__spreadArray([], pseudoValChars, true), [\n    \"~\",\n    \"^\",\n    \"$\",\n    \"*\",\n    \"+\",\n    \"!\",\n    \"|\",\n    \":\",\n    \"[\",\n    \"]\",\n    \" \",\n    \".\"\n], false).map(function(c) {\n    return c.charCodeAt(0);\n}));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */ function stringify(selector) {\n    return selector.map(function(token) {\n        return token.map(stringifyToken).join(\"\");\n    }).join(\", \");\n}\nexports.stringify = stringify;\nfunction stringifyToken(token, index, arr) {\n    switch(token.type){\n        // Simple types\n        case types_1.SelectorType.Child:\n            return index === 0 ? \"> \" : \" > \";\n        case types_1.SelectorType.Parent:\n            return index === 0 ? \"< \" : \" < \";\n        case types_1.SelectorType.Sibling:\n            return index === 0 ? \"~ \" : \" ~ \";\n        case types_1.SelectorType.Adjacent:\n            return index === 0 ? \"+ \" : \" + \";\n        case types_1.SelectorType.Descendant:\n            return \" \";\n        case types_1.SelectorType.ColumnCombinator:\n            return index === 0 ? \"|| \" : \" || \";\n        case types_1.SelectorType.Universal:\n            // Return an empty string if the selector isn't needed.\n            return token.namespace === \"*\" && index + 1 < arr.length && \"name\" in arr[index + 1] ? \"\" : \"\".concat(getNamespace(token.namespace), \"*\");\n        case types_1.SelectorType.Tag:\n            return getNamespacedName(token);\n        case types_1.SelectorType.PseudoElement:\n            return \"::\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(escapeName(token.data, charsToEscapeInPseudoValue), \")\"));\n        case types_1.SelectorType.Pseudo:\n            return \":\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(typeof token.data === \"string\" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data), \")\"));\n        case types_1.SelectorType.Attribute:\n            {\n                if (token.name === \"id\" && token.action === types_1.AttributeAction.Equals && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return \"#\".concat(escapeName(token.value, charsToEscapeInName));\n                }\n                if (token.name === \"class\" && token.action === types_1.AttributeAction.Element && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return \".\".concat(escapeName(token.value, charsToEscapeInName));\n                }\n                var name_1 = getNamespacedName(token);\n                if (token.action === types_1.AttributeAction.Exists) {\n                    return \"[\".concat(name_1, \"]\");\n                }\n                return \"[\".concat(name_1).concat(getActionValue(token.action), '=\"').concat(escapeName(token.value, charsToEscapeInAttributeValue), '\"').concat(token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\", \"]\");\n            }\n    }\n}\nfunction getActionValue(action) {\n    switch(action){\n        case types_1.AttributeAction.Equals:\n            return \"\";\n        case types_1.AttributeAction.Element:\n            return \"~\";\n        case types_1.AttributeAction.Start:\n            return \"^\";\n        case types_1.AttributeAction.End:\n            return \"$\";\n        case types_1.AttributeAction.Any:\n            return \"*\";\n        case types_1.AttributeAction.Not:\n            return \"!\";\n        case types_1.AttributeAction.Hyphen:\n            return \"|\";\n        case types_1.AttributeAction.Exists:\n            throw new Error(\"Shouldn't be here\");\n    }\n}\nfunction getNamespacedName(token) {\n    return \"\".concat(getNamespace(token.namespace)).concat(escapeName(token.name, charsToEscapeInName));\n}\nfunction getNamespace(namespace) {\n    return namespace !== null ? \"\".concat(namespace === \"*\" ? \"*\" : escapeName(namespace, charsToEscapeInName), \"|\") : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n    var lastIdx = 0;\n    var ret = \"\";\n    for(var i = 0; i < str.length; i++){\n        if (charsToEscape.has(str.charCodeAt(i))) {\n            ret += \"\".concat(str.slice(lastIdx, i), \"\\\\\").concat(str.charAt(i));\n            lastIdx = i + 1;\n        }\n    }\n    return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../node_modules/css-what/lib/commonjs/stringify.js\n");

/***/ }),

/***/ "(rsc)/../../../node_modules/css-what/lib/commonjs/types.js":
/*!************************************************************!*\
  !*** ../../../node_modules/css-what/lib/commonjs/types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AttributeAction = exports.IgnoreCaseMode = exports.SelectorType = void 0;\nvar SelectorType;\n(function(SelectorType) {\n    SelectorType[\"Attribute\"] = \"attribute\";\n    SelectorType[\"Pseudo\"] = \"pseudo\";\n    SelectorType[\"PseudoElement\"] = \"pseudo-element\";\n    SelectorType[\"Tag\"] = \"tag\";\n    SelectorType[\"Universal\"] = \"universal\";\n    // Traversals\n    SelectorType[\"Adjacent\"] = \"adjacent\";\n    SelectorType[\"Child\"] = \"child\";\n    SelectorType[\"Descendant\"] = \"descendant\";\n    SelectorType[\"Parent\"] = \"parent\";\n    SelectorType[\"Sibling\"] = \"sibling\";\n    SelectorType[\"ColumnCombinator\"] = \"column-combinator\";\n})(SelectorType = exports.SelectorType || (exports.SelectorType = {}));\n/**\n * Modes for ignore case.\n *\n * This could be updated to an enum, and the object is\n * the current stand-in that will allow code to be updated\n * without big changes.\n */ exports.IgnoreCaseMode = {\n    Unknown: null,\n    QuirksMode: \"quirks\",\n    IgnoreCase: true,\n    CaseSensitive: false\n};\nvar AttributeAction;\n(function(AttributeAction) {\n    AttributeAction[\"Any\"] = \"any\";\n    AttributeAction[\"Element\"] = \"element\";\n    AttributeAction[\"End\"] = \"end\";\n    AttributeAction[\"Equals\"] = \"equals\";\n    AttributeAction[\"Exists\"] = \"exists\";\n    AttributeAction[\"Hyphen\"] = \"hyphen\";\n    AttributeAction[\"Not\"] = \"not\";\n    AttributeAction[\"Start\"] = \"start\";\n})(AttributeAction = exports.AttributeAction || (exports.AttributeAction = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy13aGF0L2xpYi9jb21tb25qcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHNCQUFzQixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQy9FLElBQUlJO0FBQ0gsVUFBVUEsWUFBWTtJQUNuQkEsWUFBWSxDQUFDLFlBQVksR0FBRztJQUM1QkEsWUFBWSxDQUFDLFNBQVMsR0FBRztJQUN6QkEsWUFBWSxDQUFDLGdCQUFnQixHQUFHO0lBQ2hDQSxZQUFZLENBQUMsTUFBTSxHQUFHO0lBQ3RCQSxZQUFZLENBQUMsWUFBWSxHQUFHO0lBQzVCLGFBQWE7SUFDYkEsWUFBWSxDQUFDLFdBQVcsR0FBRztJQUMzQkEsWUFBWSxDQUFDLFFBQVEsR0FBRztJQUN4QkEsWUFBWSxDQUFDLGFBQWEsR0FBRztJQUM3QkEsWUFBWSxDQUFDLFNBQVMsR0FBRztJQUN6QkEsWUFBWSxDQUFDLFVBQVUsR0FBRztJQUMxQkEsWUFBWSxDQUFDLG1CQUFtQixHQUFHO0FBQ3ZDLEdBQUdBLGVBQWVKLFFBQVFJLFlBQVksSUFBS0osQ0FBQUEsb0JBQW9CLEdBQUcsQ0FBQztBQUNuRTs7Ozs7O0NBTUMsR0FDREEsc0JBQXNCLEdBQUc7SUFDckJLLFNBQVM7SUFDVEMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLGVBQWU7QUFDbkI7QUFDQSxJQUFJTjtBQUNILFVBQVVBLGVBQWU7SUFDdEJBLGVBQWUsQ0FBQyxNQUFNLEdBQUc7SUFDekJBLGVBQWUsQ0FBQyxVQUFVLEdBQUc7SUFDN0JBLGVBQWUsQ0FBQyxNQUFNLEdBQUc7SUFDekJBLGVBQWUsQ0FBQyxTQUFTLEdBQUc7SUFDNUJBLGVBQWUsQ0FBQyxTQUFTLEdBQUc7SUFDNUJBLGVBQWUsQ0FBQyxTQUFTLEdBQUc7SUFDNUJBLGVBQWUsQ0FBQyxNQUFNLEdBQUc7SUFDekJBLGVBQWUsQ0FBQyxRQUFRLEdBQUc7QUFDL0IsR0FBR0Esa0JBQWtCRixRQUFRRSxlQUFlLElBQUtGLENBQUFBLHVCQUF1QixHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraGFydmFyZC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLXdoYXQvbGliL2NvbW1vbmpzL3R5cGVzLmpzP2M3MDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZUFjdGlvbiA9IGV4cG9ydHMuSWdub3JlQ2FzZU1vZGUgPSBleHBvcnRzLlNlbGVjdG9yVHlwZSA9IHZvaWQgMDtcbnZhciBTZWxlY3RvclR5cGU7XG4oZnVuY3Rpb24gKFNlbGVjdG9yVHlwZSkge1xuICAgIFNlbGVjdG9yVHlwZVtcIkF0dHJpYnV0ZVwiXSA9IFwiYXR0cmlidXRlXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiUHNldWRvXCJdID0gXCJwc2V1ZG9cIjtcbiAgICBTZWxlY3RvclR5cGVbXCJQc2V1ZG9FbGVtZW50XCJdID0gXCJwc2V1ZG8tZWxlbWVudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlRhZ1wiXSA9IFwidGFnXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiVW5pdmVyc2FsXCJdID0gXCJ1bml2ZXJzYWxcIjtcbiAgICAvLyBUcmF2ZXJzYWxzXG4gICAgU2VsZWN0b3JUeXBlW1wiQWRqYWNlbnRcIl0gPSBcImFkamFjZW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiQ2hpbGRcIl0gPSBcImNoaWxkXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiRGVzY2VuZGFudFwiXSA9IFwiZGVzY2VuZGFudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlBhcmVudFwiXSA9IFwicGFyZW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiU2libGluZ1wiXSA9IFwic2libGluZ1wiO1xuICAgIFNlbGVjdG9yVHlwZVtcIkNvbHVtbkNvbWJpbmF0b3JcIl0gPSBcImNvbHVtbi1jb21iaW5hdG9yXCI7XG59KShTZWxlY3RvclR5cGUgPSBleHBvcnRzLlNlbGVjdG9yVHlwZSB8fCAoZXhwb3J0cy5TZWxlY3RvclR5cGUgPSB7fSkpO1xuLyoqXG4gKiBNb2RlcyBmb3IgaWdub3JlIGNhc2UuXG4gKlxuICogVGhpcyBjb3VsZCBiZSB1cGRhdGVkIHRvIGFuIGVudW0sIGFuZCB0aGUgb2JqZWN0IGlzXG4gKiB0aGUgY3VycmVudCBzdGFuZC1pbiB0aGF0IHdpbGwgYWxsb3cgY29kZSB0byBiZSB1cGRhdGVkXG4gKiB3aXRob3V0IGJpZyBjaGFuZ2VzLlxuICovXG5leHBvcnRzLklnbm9yZUNhc2VNb2RlID0ge1xuICAgIFVua25vd246IG51bGwsXG4gICAgUXVpcmtzTW9kZTogXCJxdWlya3NcIixcbiAgICBJZ25vcmVDYXNlOiB0cnVlLFxuICAgIENhc2VTZW5zaXRpdmU6IGZhbHNlLFxufTtcbnZhciBBdHRyaWJ1dGVBY3Rpb247XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZUFjdGlvbikge1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkFueVwiXSA9IFwiYW55XCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRWxlbWVudFwiXSA9IFwiZWxlbWVudFwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkVuZFwiXSA9IFwiZW5kXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRXF1YWxzXCJdID0gXCJlcXVhbHNcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFeGlzdHNcIl0gPSBcImV4aXN0c1wiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkh5cGhlblwiXSA9IFwiaHlwaGVuXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiTm90XCJdID0gXCJub3RcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJTdGFydFwiXSA9IFwic3RhcnRcIjtcbn0pKEF0dHJpYnV0ZUFjdGlvbiA9IGV4cG9ydHMuQXR0cmlidXRlQWN0aW9uIHx8IChleHBvcnRzLkF0dHJpYnV0ZUFjdGlvbiA9IHt9KSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBdHRyaWJ1dGVBY3Rpb24iLCJJZ25vcmVDYXNlTW9kZSIsIlNlbGVjdG9yVHlwZSIsIlVua25vd24iLCJRdWlya3NNb2RlIiwiSWdub3JlQ2FzZSIsIkNhc2VTZW5zaXRpdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../../node_modules/css-what/lib/commonjs/types.js\n");

/***/ })

};
;