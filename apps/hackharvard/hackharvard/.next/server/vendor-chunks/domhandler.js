"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/domhandler";
exports.ids = ["vendor-chunks/domhandler"];
exports.modules = {

/***/ "(rsc)/../../../../node_modules/domhandler/lib/index.js":
/*!********************************************************!*\
  !*** ../../../../node_modules/domhandler/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DomHandler = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(rsc)/../../../../node_modules/domelementtype/lib/index.js\");\nvar node_js_1 = __webpack_require__(/*! ./node.js */ \"(rsc)/../../../../node_modules/domhandler/lib/node.js\");\n__exportStar(__webpack_require__(/*! ./node.js */ \"(rsc)/../../../../node_modules/domhandler/lib/node.js\"), exports);\n// Default options\nvar defaultOpts = {\n    withStartIndices: false,\n    withEndIndices: false,\n    xmlMode: false\n};\nvar DomHandler = /** @class */ function() {\n    /**\n     * @param callback Called once parsing has completed.\n     * @param options Settings for the handler.\n     * @param elementCB Callback whenever a tag is closed.\n     */ function DomHandler(callback, options, elementCB) {\n        /** The elements of the DOM */ this.dom = [];\n        /** The root element for the DOM */ this.root = new node_js_1.Document(this.dom);\n        /** Indicated whether parsing has been completed. */ this.done = false;\n        /** Stack of open tags. */ this.tagStack = [\n            this.root\n        ];\n        /** A data node that is still being written to. */ this.lastNode = null;\n        /** Reference to the parser instance. Used for location information. */ this.parser = null;\n        // Make it possible to skip arguments, for backwards-compatibility\n        if (typeof options === \"function\") {\n            elementCB = options;\n            options = defaultOpts;\n        }\n        if (typeof callback === \"object\") {\n            options = callback;\n            callback = undefined;\n        }\n        this.callback = callback !== null && callback !== void 0 ? callback : null;\n        this.options = options !== null && options !== void 0 ? options : defaultOpts;\n        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n    }\n    DomHandler.prototype.onparserinit = function(parser) {\n        this.parser = parser;\n    };\n    // Resets the handler back to starting state\n    DomHandler.prototype.onreset = function() {\n        this.dom = [];\n        this.root = new node_js_1.Document(this.dom);\n        this.done = false;\n        this.tagStack = [\n            this.root\n        ];\n        this.lastNode = null;\n        this.parser = null;\n    };\n    // Signals the handler that parsing is done\n    DomHandler.prototype.onend = function() {\n        if (this.done) return;\n        this.done = true;\n        this.parser = null;\n        this.handleCallback(null);\n    };\n    DomHandler.prototype.onerror = function(error) {\n        this.handleCallback(error);\n    };\n    DomHandler.prototype.onclosetag = function() {\n        this.lastNode = null;\n        var elem = this.tagStack.pop();\n        if (this.options.withEndIndices) {\n            elem.endIndex = this.parser.endIndex;\n        }\n        if (this.elementCB) this.elementCB(elem);\n    };\n    DomHandler.prototype.onopentag = function(name, attribs) {\n        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;\n        var element = new node_js_1.Element(name, attribs, undefined, type);\n        this.addNode(element);\n        this.tagStack.push(element);\n    };\n    DomHandler.prototype.ontext = function(data) {\n        var lastNode = this.lastNode;\n        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {\n            lastNode.data += data;\n            if (this.options.withEndIndices) {\n                lastNode.endIndex = this.parser.endIndex;\n            }\n        } else {\n            var node = new node_js_1.Text(data);\n            this.addNode(node);\n            this.lastNode = node;\n        }\n    };\n    DomHandler.prototype.oncomment = function(data) {\n        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {\n            this.lastNode.data += data;\n            return;\n        }\n        var node = new node_js_1.Comment(data);\n        this.addNode(node);\n        this.lastNode = node;\n    };\n    DomHandler.prototype.oncommentend = function() {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.oncdatastart = function() {\n        var text = new node_js_1.Text(\"\");\n        var node = new node_js_1.CDATA([\n            text\n        ]);\n        this.addNode(node);\n        text.parent = node;\n        this.lastNode = text;\n    };\n    DomHandler.prototype.oncdataend = function() {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.onprocessinginstruction = function(name, data) {\n        var node = new node_js_1.ProcessingInstruction(name, data);\n        this.addNode(node);\n    };\n    DomHandler.prototype.handleCallback = function(error) {\n        if (typeof this.callback === \"function\") {\n            this.callback(error, this.dom);\n        } else if (error) {\n            throw error;\n        }\n    };\n    DomHandler.prototype.addNode = function(node) {\n        var parent = this.tagStack[this.tagStack.length - 1];\n        var previousSibling = parent.children[parent.children.length - 1];\n        if (this.options.withStartIndices) {\n            node.startIndex = this.parser.startIndex;\n        }\n        if (this.options.withEndIndices) {\n            node.endIndex = this.parser.endIndex;\n        }\n        parent.children.push(node);\n        if (previousSibling) {\n            node.prev = previousSibling;\n            previousSibling.next = node;\n        }\n        node.parent = parent;\n        this.lastNode = null;\n    };\n    return DomHandler;\n}();\nexports.DomHandler = DomHandler;\nexports[\"default\"] = DomHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/domhandler/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/domhandler/lib/node.js":
/*!*******************************************************!*\
  !*** ../../../../node_modules/domhandler/lib/node.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(rsc)/../../../../node_modules/domelementtype/lib/index.js\");\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */ var Node = /** @class */ function() {\n    function Node() {\n        /** Parent of the node */ this.parent = null;\n        /** Previous sibling */ this.prev = null;\n        /** Next sibling */ this.next = null;\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;\n    }\n    Object.defineProperty(Node.prototype, \"parentNode\", {\n        // Read-write aliases for properties\n        /**\n         * Same as {@link parent}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.parent;\n        },\n        set: function(parent) {\n            this.parent = parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"previousSibling\", {\n        /**\n         * Same as {@link prev}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.prev;\n        },\n        set: function(prev) {\n            this.prev = prev;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"nextSibling\", {\n        /**\n         * Same as {@link next}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.next;\n        },\n        set: function(next) {\n            this.next = next;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Clone this node, and optionally its children.\n     *\n     * @param recursive Clone child nodes as well.\n     * @returns A clone of the node.\n     */ Node.prototype.cloneNode = function(recursive) {\n        if (recursive === void 0) {\n            recursive = false;\n        }\n        return cloneNode(this, recursive);\n    };\n    return Node;\n}();\nexports.Node = Node;\n/**\n * A node that contains some data.\n */ var DataNode = /** @class */ function(_super) {\n    __extends(DataNode, _super);\n    /**\n     * @param data The content of the data node\n     */ function DataNode(data) {\n        var _this = _super.call(this) || this;\n        _this.data = data;\n        return _this;\n    }\n    Object.defineProperty(DataNode.prototype, \"nodeValue\", {\n        /**\n         * Same as {@link data}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.data;\n        },\n        set: function(data) {\n            this.data = data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DataNode;\n}(Node);\nexports.DataNode = DataNode;\n/**\n * Text within the document.\n */ var Text = /** @class */ function(_super) {\n    __extends(Text, _super);\n    function Text() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.Text;\n        return _this;\n    }\n    Object.defineProperty(Text.prototype, \"nodeType\", {\n        get: function() {\n            return 3;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Text;\n}(DataNode);\nexports.Text = Text;\n/**\n * Comments within the document.\n */ var Comment = /** @class */ function(_super) {\n    __extends(Comment, _super);\n    function Comment() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.Comment;\n        return _this;\n    }\n    Object.defineProperty(Comment.prototype, \"nodeType\", {\n        get: function() {\n            return 8;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Comment;\n}(DataNode);\nexports.Comment = Comment;\n/**\n * Processing instructions, including doc types.\n */ var ProcessingInstruction = /** @class */ function(_super) {\n    __extends(ProcessingInstruction, _super);\n    function ProcessingInstruction(name, data) {\n        var _this = _super.call(this, data) || this;\n        _this.name = name;\n        _this.type = domelementtype_1.ElementType.Directive;\n        return _this;\n    }\n    Object.defineProperty(ProcessingInstruction.prototype, \"nodeType\", {\n        get: function() {\n            return 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ProcessingInstruction;\n}(DataNode);\nexports.ProcessingInstruction = ProcessingInstruction;\n/**\n * A `Node` that can have children.\n */ var NodeWithChildren = /** @class */ function(_super) {\n    __extends(NodeWithChildren, _super);\n    /**\n     * @param children Children of the node. Only certain node types can have children.\n     */ function NodeWithChildren(children) {\n        var _this = _super.call(this) || this;\n        _this.children = children;\n        return _this;\n    }\n    Object.defineProperty(NodeWithChildren.prototype, \"firstChild\", {\n        // Aliases\n        /** First child of the node. */ get: function() {\n            var _a;\n            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"lastChild\", {\n        /** Last child of the node. */ get: function() {\n            return this.children.length > 0 ? this.children[this.children.length - 1] : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"childNodes\", {\n        /**\n         * Same as {@link children}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.children;\n        },\n        set: function(children) {\n            this.children = children;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return NodeWithChildren;\n}(Node);\nexports.NodeWithChildren = NodeWithChildren;\nvar CDATA = /** @class */ function(_super) {\n    __extends(CDATA, _super);\n    function CDATA() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.CDATA;\n        return _this;\n    }\n    Object.defineProperty(CDATA.prototype, \"nodeType\", {\n        get: function() {\n            return 4;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return CDATA;\n}(NodeWithChildren);\nexports.CDATA = CDATA;\n/**\n * The root node of the document.\n */ var Document = /** @class */ function(_super) {\n    __extends(Document, _super);\n    function Document() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.Root;\n        return _this;\n    }\n    Object.defineProperty(Document.prototype, \"nodeType\", {\n        get: function() {\n            return 9;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Document;\n}(NodeWithChildren);\nexports.Document = Document;\n/**\n * An element within the DOM.\n */ var Element = /** @class */ function(_super) {\n    __extends(Element, _super);\n    /**\n     * @param name Name of the tag, eg. `div`, `span`.\n     * @param attribs Object mapping attribute names to attribute values.\n     * @param children Children of the node.\n     */ function Element(name, attribs, children, type) {\n        if (children === void 0) {\n            children = [];\n        }\n        if (type === void 0) {\n            type = name === \"script\" ? domelementtype_1.ElementType.Script : name === \"style\" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;\n        }\n        var _this = _super.call(this, children) || this;\n        _this.name = name;\n        _this.attribs = attribs;\n        _this.type = type;\n        return _this;\n    }\n    Object.defineProperty(Element.prototype, \"nodeType\", {\n        get: function() {\n            return 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Element.prototype, \"tagName\", {\n        // DOM Level 1 aliases\n        /**\n         * Same as {@link name}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.name;\n        },\n        set: function(name) {\n            this.name = name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Element.prototype, \"attributes\", {\n        get: function() {\n            var _this = this;\n            return Object.keys(this.attribs).map(function(name) {\n                var _a, _b;\n                return {\n                    name: name,\n                    value: _this.attribs[name],\n                    namespace: (_a = _this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\n                    prefix: (_b = _this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name]\n                };\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Element;\n}(NodeWithChildren);\nexports.Element = Element;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */ function isTag(node) {\n    return (0, domelementtype_1.isTag)(node);\n}\nexports.isTag = isTag;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */ function isCDATA(node) {\n    return node.type === domelementtype_1.ElementType.CDATA;\n}\nexports.isCDATA = isCDATA;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */ function isText(node) {\n    return node.type === domelementtype_1.ElementType.Text;\n}\nexports.isText = isText;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */ function isComment(node) {\n    return node.type === domelementtype_1.ElementType.Comment;\n}\nexports.isComment = isComment;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDirective(node) {\n    return node.type === domelementtype_1.ElementType.Directive;\n}\nexports.isDirective = isDirective;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDocument(node) {\n    return node.type === domelementtype_1.ElementType.Root;\n}\nexports.isDocument = isDocument;\n/**\n * @param node Node to check.\n * @returns `true` if the node has children, `false` otherwise.\n */ function hasChildren(node) {\n    return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\nexports.hasChildren = hasChildren;\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */ function cloneNode(node, recursive) {\n    if (recursive === void 0) {\n        recursive = false;\n    }\n    var result;\n    if (isText(node)) {\n        result = new Text(node.data);\n    } else if (isComment(node)) {\n        result = new Comment(node.data);\n    } else if (isTag(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);\n        children.forEach(function(child) {\n            return child.parent = clone_1;\n        });\n        if (node.namespace != null) {\n            clone_1.namespace = node.namespace;\n        }\n        if (node[\"x-attribsNamespace\"]) {\n            clone_1[\"x-attribsNamespace\"] = __assign({}, node[\"x-attribsNamespace\"]);\n        }\n        if (node[\"x-attribsPrefix\"]) {\n            clone_1[\"x-attribsPrefix\"] = __assign({}, node[\"x-attribsPrefix\"]);\n        }\n        result = clone_1;\n    } else if (isCDATA(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_2 = new CDATA(children);\n        children.forEach(function(child) {\n            return child.parent = clone_2;\n        });\n        result = clone_2;\n    } else if (isDocument(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_3 = new Document(children);\n        children.forEach(function(child) {\n            return child.parent = clone_3;\n        });\n        if (node[\"x-mode\"]) {\n            clone_3[\"x-mode\"] = node[\"x-mode\"];\n        }\n        result = clone_3;\n    } else if (isDirective(node)) {\n        var instruction = new ProcessingInstruction(node.name, node.data);\n        if (node[\"x-name\"] != null) {\n            instruction[\"x-name\"] = node[\"x-name\"];\n            instruction[\"x-publicId\"] = node[\"x-publicId\"];\n            instruction[\"x-systemId\"] = node[\"x-systemId\"];\n        }\n        result = instruction;\n    } else {\n        throw new Error(\"Not implemented yet: \".concat(node.type));\n    }\n    result.startIndex = node.startIndex;\n    result.endIndex = node.endIndex;\n    if (node.sourceCodeLocation != null) {\n        result.sourceCodeLocation = node.sourceCodeLocation;\n    }\n    return result;\n}\nexports.cloneNode = cloneNode;\nfunction cloneChildren(childs) {\n    var children = childs.map(function(child) {\n        return cloneNode(child, true);\n    });\n    for(var i = 1; i < children.length; i++){\n        children[i].prev = children[i - 1];\n        children[i - 1].next = children[i];\n    }\n    return children;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RvbWhhbmRsZXIvbGliL25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsU0FBUyxJQUFLO0lBQ3hDLElBQUlDLGdCQUFnQixTQUFVQyxDQUFDLEVBQUVDLENBQUM7UUFDOUJGLGdCQUFnQkcsT0FBT0MsY0FBYyxJQUNoQztZQUFFQyxXQUFXLEVBQUU7UUFBQyxjQUFhQyxTQUFTLFNBQVVMLENBQUMsRUFBRUMsQ0FBQztZQUFJRCxFQUFFSSxTQUFTLEdBQUdIO1FBQUcsS0FDMUUsU0FBVUQsQ0FBQyxFQUFFQyxDQUFDO1lBQUksSUFBSyxJQUFJSyxLQUFLTCxFQUFHLElBQUlDLE9BQU9LLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLEdBQUdLLElBQUlOLENBQUMsQ0FBQ00sRUFBRSxHQUFHTCxDQUFDLENBQUNLLEVBQUU7UUFBRTtRQUNwRyxPQUFPUCxjQUFjQyxHQUFHQztJQUM1QjtJQUNBLE9BQU8sU0FBVUQsQ0FBQyxFQUFFQyxDQUFDO1FBQ2pCLElBQUksT0FBT0EsTUFBTSxjQUFjQSxNQUFNLE1BQ2pDLE1BQU0sSUFBSVMsVUFBVSx5QkFBeUJDLE9BQU9WLEtBQUs7UUFDN0RGLGNBQWNDLEdBQUdDO1FBQ2pCLFNBQVNXO1lBQU8sSUFBSSxDQUFDQyxXQUFXLEdBQUdiO1FBQUc7UUFDdENBLEVBQUVPLFNBQVMsR0FBR04sTUFBTSxPQUFPQyxPQUFPWSxNQUFNLENBQUNiLEtBQU1XLENBQUFBLEdBQUdMLFNBQVMsR0FBR04sRUFBRU0sU0FBUyxFQUFFLElBQUlLLElBQUc7SUFDdEY7QUFDSjtBQUNBLElBQUlHLFdBQVcsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxRQUFRLElBQUs7SUFDdENBLFdBQVdiLE9BQU9jLE1BQU0sSUFBSSxTQUFTQyxDQUFDO1FBQ2xDLElBQUssSUFBSUMsR0FBR0MsSUFBSSxHQUFHQyxJ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QUFjLElBQUk1QyxzQkFBc0JvQyxLQUFLZCxJQUFJLEVBQUVjLEtBQUtsQixJQUFJO1FBQ2hFLElBQUlrQixJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU07WUFDeEJRLFdBQVcsQ0FBQyxTQUFTLEdBQUdSLElBQUksQ0FBQyxTQUFTO1lBQ3RDUSxXQUFXLENBQUMsYUFBYSxHQUFHUixJQUFJLENBQUMsYUFBYTtZQUM5Q1EsV0FBVyxDQUFDLGFBQWEsR0FBR1IsSUFBSSxDQUFDLGFBQWE7UUFDbEQ7UUFDQUMsU0FBU087SUFDYixPQUNLO1FBQ0QsTUFBTSxJQUFJQyxNQUFNLHdCQUF3QkMsTUFBTSxDQUFDVixLQUFLaEIsSUFBSTtJQUM1RDtJQUNBaUIsT0FBTzNCLFVBQVUsR0FBRzBCLEtBQUsxQixVQUFVO0lBQ25DMkIsT0FBTzFCLFFBQVEsR0FBR3lCLEtBQUt6QixRQUFRO0lBQy9CLElBQUl5QixLQUFLVyxrQkFBa0IsSUFBSSxNQUFNO1FBQ2pDVixPQUFPVSxrQkFBa0IsR0FBR1gsS0FBS1csa0JBQWtCO0lBQ3ZEO0lBQ0EsT0FBT1Y7QUFDWDtBQUNBbkQsaUJBQWlCLEdBQUdFO0FBQ3BCLFNBQVNrRCxjQUFjVSxNQUFNO0lBQ3pCLElBQUl4QixXQUFXd0IsT0FBT2hCLEdBQUcsQ0FBQyxTQUFVUyxLQUFLO1FBQUksT0FBT3JELFVBQVVxRCxPQUFPO0lBQU87SUFDNUUsSUFBSyxJQUFJN0QsSUFBSSxHQUFHQSxJQUFJNEMsU0FBU3pDLE1BQU0sRUFBRUgsSUFBSztRQUN0QzRDLFFBQVEsQ0FBQzVDLEVBQUUsQ0FBQzRCLElBQUksR0FBR2dCLFFBQVEsQ0FBQzVDLElBQUksRUFBRTtRQUNsQzRDLFFBQVEsQ0FBQzVDLElBQUksRUFBRSxDQUFDNkIsSUFBSSxHQUFHZSxRQUFRLENBQUM1QyxFQUFFO0lBQ3RDO0lBQ0EsT0FBTzRDO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraGFydmFyZC8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZG9taGFuZGxlci9saWIvbm9kZS5qcz9hZWFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsb25lTm9kZSA9IGV4cG9ydHMuaGFzQ2hpbGRyZW4gPSBleHBvcnRzLmlzRG9jdW1lbnQgPSBleHBvcnRzLmlzRGlyZWN0aXZlID0gZXhwb3J0cy5pc0NvbW1lbnQgPSBleHBvcnRzLmlzVGV4dCA9IGV4cG9ydHMuaXNDREFUQSA9IGV4cG9ydHMuaXNUYWcgPSBleHBvcnRzLkVsZW1lbnQgPSBleHBvcnRzLkRvY3VtZW50ID0gZXhwb3J0cy5DREFUQSA9IGV4cG9ydHMuTm9kZVdpdGhDaGlsZHJlbiA9IGV4cG9ydHMuUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gZXhwb3J0cy5Db21tZW50ID0gZXhwb3J0cy5UZXh0ID0gZXhwb3J0cy5EYXRhTm9kZSA9IGV4cG9ydHMuTm9kZSA9IHZvaWQgMDtcbnZhciBkb21lbGVtZW50dHlwZV8xID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xuLyoqXG4gKiBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgdGhlIHByb3RvdHlwZSBmb3IgTm9kZXMgd2hlbiBjcmVhdGluZyBhXG4gKiBET00tTGV2ZWwtMS1jb21wbGlhbnQgc3RydWN0dXJlLlxuICovXG52YXIgTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb2RlKCkge1xuICAgICAgICAvKiogUGFyZW50IG9mIHRoZSBub2RlICovXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgLyoqIFByZXZpb3VzIHNpYmxpbmcgKi9cbiAgICAgICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICAgICAgLyoqIE5leHQgc2libGluZyAqL1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aFN0YXJ0SW5kaWNlc2Agb24gdGhlIGhhbmRsZXIgdG8gYmUgYHRydWUuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IG51bGw7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aEVuZEluZGljZXNgIG9uIHRoZSBoYW5kbGVyIHRvIGJlIGB0cnVlLiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInBhcmVudE5vZGVcIiwge1xuICAgICAgICAvLyBSZWFkLXdyaXRlIGFsaWFzZXMgZm9yIHByb3BlcnRpZXNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rIHBhcmVudH0uXG4gICAgICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwicHJldmlvdXNTaWJsaW5nXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rIHByZXZ9LlxuICAgICAgICAgKiBbRE9NIHNwZWNdKGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZyktY29tcGF0aWJsZSBhbGlhcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAocHJldikge1xuICAgICAgICAgICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJuZXh0U2libGluZ1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBuZXh0fS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGlzIG5vZGUsIGFuZCBvcHRpb25hbGx5IGl0cyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWN1cnNpdmUgQ2xvbmUgY2hpbGQgbm9kZXMgYXMgd2VsbC5cbiAgICAgKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIE5vZGUucHJvdG90eXBlLmNsb25lTm9kZSA9IGZ1bmN0aW9uIChyZWN1cnNpdmUpIHtcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiBjbG9uZU5vZGUodGhpcywgcmVjdXJzaXZlKTtcbiAgICB9O1xuICAgIHJldHVybiBOb2RlO1xufSgpKTtcbmV4cG9ydHMuTm9kZSA9IE5vZGU7XG4vKipcbiAqIEEgbm9kZSB0aGF0IGNvbnRhaW5zIHNvbWUgZGF0YS5cbiAqL1xudmFyIERhdGFOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXRhTm9kZSwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgY29udGVudCBvZiB0aGUgZGF0YSBub2RlXG4gICAgICovXG4gICAgZnVuY3Rpb24gRGF0YU5vZGUoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YU5vZGUucHJvdG90eXBlLCBcIm5vZGVWYWx1ZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBkYXRhfS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRGF0YU5vZGU7XG59KE5vZGUpKTtcbmV4cG9ydHMuRGF0YU5vZGUgPSBEYXRhTm9kZTtcbi8qKlxuICogVGV4dCB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICovXG52YXIgVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuVGV4dDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGV4dC5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFRleHQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLlRleHQgPSBUZXh0O1xuLyoqXG4gKiBDb21tZW50cyB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICovXG52YXIgQ29tbWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tbWVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21tZW50KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuQ29tbWVudDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tbWVudC5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiA4O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbW1lbnQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLkNvbW1lbnQgPSBDb21tZW50O1xuLyoqXG4gKiBQcm9jZXNzaW5nIGluc3RydWN0aW9ucywgaW5jbHVkaW5nIGRvYyB0eXBlcy5cbiAqL1xudmFyIFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByb2Nlc3NpbmdJbnN0cnVjdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRhdGEpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy50eXBlID0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5EaXJlY3RpdmU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFByb2Nlc3NpbmdJbnN0cnVjdGlvbjtcbn0oRGF0YU5vZGUpKTtcbmV4cG9ydHMuUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuLyoqXG4gKiBBIGBOb2RlYCB0aGF0IGNhbiBoYXZlIGNoaWxkcmVuLlxuICovXG52YXIgTm9kZVdpdGhDaGlsZHJlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTm9kZVdpdGhDaGlsZHJlbiwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW4gQ2hpbGRyZW4gb2YgdGhlIG5vZGUuIE9ubHkgY2VydGFpbiBub2RlIHR5cGVzIGNhbiBoYXZlIGNoaWxkcmVuLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vZGVXaXRoQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVdpdGhDaGlsZHJlbi5wcm90b3R5cGUsIFwiZmlyc3RDaGlsZFwiLCB7XG4gICAgICAgIC8vIEFsaWFzZXNcbiAgICAgICAgLyoqIEZpcnN0IGNoaWxkIG9mIHRoZSBub2RlLiAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLmNoaWxkcmVuWzBdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVXaXRoQ2hpbGRyZW4ucHJvdG90eXBlLCBcImxhc3RDaGlsZFwiLCB7XG4gICAgICAgIC8qKiBMYXN0IGNoaWxkIG9mIHRoZSBub2RlLiAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlV2l0aENoaWxkcmVuLnByb3RvdHlwZSwgXCJjaGlsZE5vZGVzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rIGNoaWxkcmVufS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIE5vZGVXaXRoQ2hpbGRyZW47XG59KE5vZGUpKTtcbmV4cG9ydHMuTm9kZVdpdGhDaGlsZHJlbiA9IE5vZGVXaXRoQ2hpbGRyZW47XG52YXIgQ0RBVEEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENEQVRBLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENEQVRBKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuQ0RBVEE7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENEQVRBLnByb3RvdHlwZSwgXCJub2RlVHlwZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ0RBVEE7XG59KE5vZGVXaXRoQ2hpbGRyZW4pKTtcbmV4cG9ydHMuQ0RBVEEgPSBDREFUQTtcbi8qKlxuICogVGhlIHJvb3Qgbm9kZSBvZiB0aGUgZG9jdW1lbnQuXG4gKi9cbnZhciBEb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRG9jdW1lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50eXBlID0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Sb290O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEb2N1bWVudC5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIERvY3VtZW50O1xufShOb2RlV2l0aENoaWxkcmVuKSk7XG5leHBvcnRzLkRvY3VtZW50ID0gRG9jdW1lbnQ7XG4vKipcbiAqIEFuIGVsZW1lbnQgd2l0aGluIHRoZSBET00uXG4gKi9cbnZhciBFbGVtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbGVtZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHRhZywgZWcuIGBkaXZgLCBgc3BhbmAuXG4gICAgICogQHBhcmFtIGF0dHJpYnMgT2JqZWN0IG1hcHBpbmcgYXR0cmlidXRlIG5hbWVzIHRvIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEVsZW1lbnQobmFtZSwgYXR0cmlicywgY2hpbGRyZW4sIHR5cGUpIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB2b2lkIDApIHsgY2hpbGRyZW4gPSBbXTsgfVxuICAgICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSBuYW1lID09PSBcInNjcmlwdFwiXG4gICAgICAgICAgICA/IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuU2NyaXB0XG4gICAgICAgICAgICA6IG5hbWUgPT09IFwic3R5bGVcIlxuICAgICAgICAgICAgICAgID8gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5TdHlsZVxuICAgICAgICAgICAgICAgIDogZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5UYWc7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY2hpbGRyZW4pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5hdHRyaWJzID0gYXR0cmlicztcbiAgICAgICAgX3RoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnQucHJvdG90eXBlLCBcIm5vZGVUeXBlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50LnByb3RvdHlwZSwgXCJ0YWdOYW1lXCIsIHtcbiAgICAgICAgLy8gRE9NIExldmVsIDEgYWxpYXNlc1xuICAgICAgICAvKipcbiAgICAgICAgICogU2FtZSBhcyB7QGxpbmsgbmFtZX0uXG4gICAgICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnQucHJvdG90eXBlLCBcImF0dHJpYnV0ZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5hdHRyaWJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuYXR0cmlic1tuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiAoX2EgPSBfdGhpc1tcIngtYXR0cmlic05hbWVzcGFjZVwiXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25hbWVdLFxuICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IChfYiA9IF90aGlzW1wieC1hdHRyaWJzUHJlZml4XCJdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbbmFtZV0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBFbGVtZW50O1xufShOb2RlV2l0aENoaWxkcmVuKSk7XG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYEVsZW1lbnRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNUYWcobm9kZSkge1xuICAgIHJldHVybiAoMCwgZG9tZWxlbWVudHR5cGVfMS5pc1RhZykobm9kZSk7XG59XG5leHBvcnRzLmlzVGFnID0gaXNUYWc7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBDREFUQWAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc0NEQVRBKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLkNEQVRBO1xufVxuZXhwb3J0cy5pc0NEQVRBID0gaXNDREFUQTtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgdGhlIHR5cGUgYFRleHRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlRleHQ7XG59XG5leHBvcnRzLmlzVGV4dCA9IGlzVGV4dDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgdGhlIHR5cGUgYENvbW1lbnRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNDb21tZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLkNvbW1lbnQ7XG59XG5leHBvcnRzLmlzQ29tbWVudCA9IGlzQ29tbWVudDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgdGhlIHR5cGUgYFByb2Nlc3NpbmdJbnN0cnVjdGlvbmAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc0RpcmVjdGl2ZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5EaXJlY3RpdmU7XG59XG5leHBvcnRzLmlzRGlyZWN0aXZlID0gaXNEaXJlY3RpdmU7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25gLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNEb2N1bWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Sb290O1xufVxuZXhwb3J0cy5pc0RvY3VtZW50ID0gaXNEb2N1bWVudDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgY2hpbGRyZW4sIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBoYXNDaGlsZHJlbihub2RlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChub2RlLCBcImNoaWxkcmVuXCIpO1xufVxuZXhwb3J0cy5oYXNDaGlsZHJlbiA9IGhhc0NoaWxkcmVuO1xuLyoqXG4gKiBDbG9uZSBhIG5vZGUsIGFuZCBvcHRpb25hbGx5IGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gcmVjdXJzaXZlIENsb25lIGNoaWxkIG5vZGVzIGFzIHdlbGwuXG4gKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoZSBub2RlLlxuICovXG5mdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgcmVjdXJzaXZlKSB7XG4gICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IGZhbHNlOyB9XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoaXNUZXh0KG5vZGUpKSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0KG5vZGUuZGF0YSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQ29tbWVudChub2RlKSkge1xuICAgICAgICByZXN1bHQgPSBuZXcgQ29tbWVudChub2RlLmRhdGEpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1RhZyhub2RlKSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWN1cnNpdmUgPyBjbG9uZUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4pIDogW107XG4gICAgICAgIHZhciBjbG9uZV8xID0gbmV3IEVsZW1lbnQobm9kZS5uYW1lLCBfX2Fzc2lnbih7fSwgbm9kZS5hdHRyaWJzKSwgY2hpbGRyZW4pO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gKGNoaWxkLnBhcmVudCA9IGNsb25lXzEpOyB9KTtcbiAgICAgICAgaWYgKG5vZGUubmFtZXNwYWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsb25lXzEubmFtZXNwYWNlID0gbm9kZS5uYW1lc3BhY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0pIHtcbiAgICAgICAgICAgIGNsb25lXzFbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0gPSBfX2Fzc2lnbih7fSwgbm9kZVtcIngtYXR0cmlic05hbWVzcGFjZVwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVbXCJ4LWF0dHJpYnNQcmVmaXhcIl0pIHtcbiAgICAgICAgICAgIGNsb25lXzFbXCJ4LWF0dHJpYnNQcmVmaXhcIl0gPSBfX2Fzc2lnbih7fSwgbm9kZVtcIngtYXR0cmlic1ByZWZpeFwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gY2xvbmVfMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDREFUQShub2RlKSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWN1cnNpdmUgPyBjbG9uZUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4pIDogW107XG4gICAgICAgIHZhciBjbG9uZV8yID0gbmV3IENEQVRBKGNoaWxkcmVuKTtcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChjaGlsZC5wYXJlbnQgPSBjbG9uZV8yKTsgfSk7XG4gICAgICAgIHJlc3VsdCA9IGNsb25lXzI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVjdXJzaXZlID8gY2xvbmVDaGlsZHJlbihub2RlLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICB2YXIgY2xvbmVfMyA9IG5ldyBEb2N1bWVudChjaGlsZHJlbik7XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiAoY2hpbGQucGFyZW50ID0gY2xvbmVfMyk7IH0pO1xuICAgICAgICBpZiAobm9kZVtcIngtbW9kZVwiXSkge1xuICAgICAgICAgICAgY2xvbmVfM1tcIngtbW9kZVwiXSA9IG5vZGVbXCJ4LW1vZGVcIl07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gY2xvbmVfMztcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEaXJlY3RpdmUobm9kZSkpIHtcbiAgICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbihub2RlLm5hbWUsIG5vZGUuZGF0YSk7XG4gICAgICAgIGlmIChub2RlW1wieC1uYW1lXCJdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGluc3RydWN0aW9uW1wieC1uYW1lXCJdID0gbm9kZVtcIngtbmFtZVwiXTtcbiAgICAgICAgICAgIGluc3RydWN0aW9uW1wieC1wdWJsaWNJZFwiXSA9IG5vZGVbXCJ4LXB1YmxpY0lkXCJdO1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bXCJ4LXN5c3RlbUlkXCJdID0gbm9kZVtcIngtc3lzdGVtSWRcIl07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gaW5zdHJ1Y3Rpb247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQgeWV0OiBcIi5jb25jYXQobm9kZS50eXBlKSk7XG4gICAgfVxuICAgIHJlc3VsdC5zdGFydEluZGV4ID0gbm9kZS5zdGFydEluZGV4O1xuICAgIHJlc3VsdC5lbmRJbmRleCA9IG5vZGUuZW5kSW5kZXg7XG4gICAgaWYgKG5vZGUuc291cmNlQ29kZUxvY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnNvdXJjZUNvZGVMb2NhdGlvbiA9IG5vZGUuc291cmNlQ29kZUxvY2F0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jbG9uZU5vZGUgPSBjbG9uZU5vZGU7XG5mdW5jdGlvbiBjbG9uZUNoaWxkcmVuKGNoaWxkcykge1xuICAgIHZhciBjaGlsZHJlbiA9IGNoaWxkcy5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBjbG9uZU5vZGUoY2hpbGQsIHRydWUpOyB9KTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkcmVuW2ldLnByZXYgPSBjaGlsZHJlbltpIC0gMV07XG4gICAgICAgIGNoaWxkcmVuW2kgLSAxXS5uZXh0ID0gY2hpbGRyZW5baV07XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbn1cbiJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2xvbmVOb2RlIiwiaGFzQ2hpbGRyZW4iLCJpc0RvY3VtZW50IiwiaXNEaXJlY3RpdmUiLCJpc0NvbW1lbnQiLCJpc1RleHQiLCJpc0NEQVRBIiwiaXNUYWciLCJFbGVtZW50IiwiRG9jdW1lbnQiLCJDREFUQSIsIk5vZGVXaXRoQ2hpbGRyZW4iLCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJDb21tZW50IiwiVGV4dCIsIkRhdGFOb2RlIiwiTm9kZSIsImRvbWVsZW1lbnR0eXBlXzEiLCJyZXF1aXJlIiwicGFyZW50IiwicHJldiIsIm5leHQiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJnZXQiLCJzZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwicmVjdXJzaXZlIiwiX3N1cGVyIiwiZGF0YSIsIl90aGlzIiwidHlwZSIsIkVsZW1lbnRUeXBlIiwibmFtZSIsIkRpcmVjdGl2ZSIsImNoaWxkcmVuIiwiX2EiLCJSb290IiwiYXR0cmlicyIsIlNjcmlwdCIsIlN0eWxlIiwiVGFnIiwia2V5cyIsIm1hcCIsIl9iIiwibmFtZXNwYWNlIiwicHJlZml4Iiwibm9kZSIsInJlc3VsdCIsImNsb25lQ2hpbGRyZW4iLCJjbG9uZV8xIiwiZm9yRWFjaCIsImNoaWxkIiwiY2xvbmVfMiIsImNsb25lXzMiLCJpbnN0cnVjdGlvbiIsIkVycm9yIiwiY29uY2F0Iiwic291cmNlQ29kZUxvY2F0aW9uIiwiY2hpbGRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/domhandler/lib/node.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/domhandler/lib/esm/index.js":
/*!************************************************************!*\
  !*** ../../../../node_modules/domhandler/lib/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CDATA: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.CDATA),\n/* harmony export */   Comment: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Comment),\n/* harmony export */   DataNode: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.DataNode),\n/* harmony export */   Document: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Document),\n/* harmony export */   DomHandler: () => (/* binding */ DomHandler),\n/* harmony export */   Element: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Element),\n/* harmony export */   Node: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Node),\n/* harmony export */   NodeWithChildren: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.NodeWithChildren),\n/* harmony export */   ProcessingInstruction: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.ProcessingInstruction),\n/* harmony export */   Text: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Text),\n/* harmony export */   cloneNode: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.cloneNode),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   hasChildren: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.hasChildren),\n/* harmony export */   isCDATA: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isCDATA),\n/* harmony export */   isComment: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isComment),\n/* harmony export */   isDirective: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isDirective),\n/* harmony export */   isDocument: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isDocument),\n/* harmony export */   isTag: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isTag),\n/* harmony export */   isText: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isText)\n/* harmony export */ });\n/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ \"(rsc)/../../../../node_modules/domelementtype/lib/esm/index.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"(rsc)/../../../../node_modules/domhandler/lib/esm/node.js\");\n\n\n\n// Default options\nconst defaultOpts = {\n    withStartIndices: false,\n    withEndIndices: false,\n    xmlMode: false\n};\nclass DomHandler {\n    /**\n     * @param callback Called once parsing has completed.\n     * @param options Settings for the handler.\n     * @param elementCB Callback whenever a tag is closed.\n     */ constructor(callback, options, elementCB){\n        /** The elements of the DOM */ this.dom = [];\n        /** The root element for the DOM */ this.root = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Document(this.dom);\n        /** Indicated whether parsing has been completed. */ this.done = false;\n        /** Stack of open tags. */ this.tagStack = [\n            this.root\n        ];\n        /** A data node that is still being written to. */ this.lastNode = null;\n        /** Reference to the parser instance. Used for location information. */ this.parser = null;\n        // Make it possible to skip arguments, for backwards-compatibility\n        if (typeof options === \"function\") {\n            elementCB = options;\n            options = defaultOpts;\n        }\n        if (typeof callback === \"object\") {\n            options = callback;\n            callback = undefined;\n        }\n        this.callback = callback !== null && callback !== void 0 ? callback : null;\n        this.options = options !== null && options !== void 0 ? options : defaultOpts;\n        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n    }\n    onparserinit(parser) {\n        this.parser = parser;\n    }\n    // Resets the handler back to starting state\n    onreset() {\n        this.dom = [];\n        this.root = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Document(this.dom);\n        this.done = false;\n        this.tagStack = [\n            this.root\n        ];\n        this.lastNode = null;\n        this.parser = null;\n    }\n    // Signals the handler that parsing is done\n    onend() {\n        if (this.done) return;\n        this.done = true;\n        this.parser = null;\n        this.handleCallback(null);\n    }\n    onerror(error) {\n        this.handleCallback(error);\n    }\n    onclosetag() {\n        this.lastNode = null;\n        const elem = this.tagStack.pop();\n        if (this.options.withEndIndices) {\n            elem.endIndex = this.parser.endIndex;\n        }\n        if (this.elementCB) this.elementCB(elem);\n    }\n    onopentag(name, attribs) {\n        const type = this.options.xmlMode ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Tag : undefined;\n        const element = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Element(name, attribs, undefined, type);\n        this.addNode(element);\n        this.tagStack.push(element);\n    }\n    ontext(data) {\n        const { lastNode } = this;\n        if (lastNode && lastNode.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text) {\n            lastNode.data += data;\n            if (this.options.withEndIndices) {\n                lastNode.endIndex = this.parser.endIndex;\n            }\n        } else {\n            const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Text(data);\n            this.addNode(node);\n            this.lastNode = node;\n        }\n    }\n    oncomment(data) {\n        if (this.lastNode && this.lastNode.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment) {\n            this.lastNode.data += data;\n            return;\n        }\n        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Comment(data);\n        this.addNode(node);\n        this.lastNode = node;\n    }\n    oncommentend() {\n        this.lastNode = null;\n    }\n    oncdatastart() {\n        const text = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Text(\"\");\n        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.CDATA([\n            text\n        ]);\n        this.addNode(node);\n        text.parent = node;\n        this.lastNode = text;\n    }\n    oncdataend() {\n        this.lastNode = null;\n    }\n    onprocessinginstruction(name, data) {\n        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.ProcessingInstruction(name, data);\n        this.addNode(node);\n    }\n    handleCallback(error) {\n        if (typeof this.callback === \"function\") {\n            this.callback(error, this.dom);\n        } else if (error) {\n            throw error;\n        }\n    }\n    addNode(node) {\n        const parent = this.tagStack[this.tagStack.length - 1];\n        const previousSibling = parent.children[parent.children.length - 1];\n        if (this.options.withStartIndices) {\n            node.startIndex = this.parser.startIndex;\n        }\n        if (this.options.withEndIndices) {\n            node.endIndex = this.parser.endIndex;\n        }\n        parent.children.push(node);\n        if (previousSibling) {\n            node.prev = previousSibling;\n            previousSibling.next = node;\n        }\n        node.parent = parent;\n        this.lastNode = null;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DomHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/domhandler/lib/esm/index.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/domhandler/lib/esm/node.js":
/*!***********************************************************!*\
  !*** ../../../../node_modules/domhandler/lib/esm/node.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CDATA: () => (/* binding */ CDATA),\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   DataNode: () => (/* binding */ DataNode),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodeWithChildren: () => (/* binding */ NodeWithChildren),\n/* harmony export */   ProcessingInstruction: () => (/* binding */ ProcessingInstruction),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   cloneNode: () => (/* binding */ cloneNode),\n/* harmony export */   hasChildren: () => (/* binding */ hasChildren),\n/* harmony export */   isCDATA: () => (/* binding */ isCDATA),\n/* harmony export */   isComment: () => (/* binding */ isComment),\n/* harmony export */   isDirective: () => (/* binding */ isDirective),\n/* harmony export */   isDocument: () => (/* binding */ isDocument),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   isText: () => (/* binding */ isText)\n/* harmony export */ });\n/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ \"(rsc)/../../../../node_modules/domelementtype/lib/esm/index.js\");\n\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */ class Node {\n    constructor(){\n        /** Parent of the node */ this.parent = null;\n        /** Previous sibling */ this.prev = null;\n        /** Next sibling */ this.next = null;\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;\n    }\n    // Read-write aliases for properties\n    /**\n     * Same as {@link parent}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get parentNode() {\n        return this.parent;\n    }\n    set parentNode(parent) {\n        this.parent = parent;\n    }\n    /**\n     * Same as {@link prev}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get previousSibling() {\n        return this.prev;\n    }\n    set previousSibling(prev) {\n        this.prev = prev;\n    }\n    /**\n     * Same as {@link next}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get nextSibling() {\n        return this.next;\n    }\n    set nextSibling(next) {\n        this.next = next;\n    }\n    /**\n     * Clone this node, and optionally its children.\n     *\n     * @param recursive Clone child nodes as well.\n     * @returns A clone of the node.\n     */ cloneNode(recursive = false) {\n        return cloneNode(this, recursive);\n    }\n}\n/**\n * A node that contains some data.\n */ class DataNode extends Node {\n    /**\n     * @param data The content of the data node\n     */ constructor(data){\n        super();\n        this.data = data;\n    }\n    /**\n     * Same as {@link data}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get nodeValue() {\n        return this.data;\n    }\n    set nodeValue(data) {\n        this.data = data;\n    }\n}\n/**\n * Text within the document.\n */ class Text extends DataNode {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text;\n    }\n    get nodeType() {\n        return 3;\n    }\n}\n/**\n * Comments within the document.\n */ class Comment extends DataNode {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment;\n    }\n    get nodeType() {\n        return 8;\n    }\n}\n/**\n * Processing instructions, including doc types.\n */ class ProcessingInstruction extends DataNode {\n    constructor(name, data){\n        super(data);\n        this.name = name;\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Directive;\n    }\n    get nodeType() {\n        return 1;\n    }\n}\n/**\n * A `Node` that can have children.\n */ class NodeWithChildren extends Node {\n    /**\n     * @param children Children of the node. Only certain node types can have children.\n     */ constructor(children){\n        super();\n        this.children = children;\n    }\n    // Aliases\n    /** First child of the node. */ get firstChild() {\n        var _a;\n        return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /** Last child of the node. */ get lastChild() {\n        return this.children.length > 0 ? this.children[this.children.length - 1] : null;\n    }\n    /**\n     * Same as {@link children}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get childNodes() {\n        return this.children;\n    }\n    set childNodes(children) {\n        this.children = children;\n    }\n}\nclass CDATA extends NodeWithChildren {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.CDATA;\n    }\n    get nodeType() {\n        return 4;\n    }\n}\n/**\n * The root node of the document.\n */ class Document extends NodeWithChildren {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Root;\n    }\n    get nodeType() {\n        return 9;\n    }\n}\n/**\n * An element within the DOM.\n */ class Element extends NodeWithChildren {\n    /**\n     * @param name Name of the tag, eg. `div`, `span`.\n     * @param attribs Object mapping attribute names to attribute values.\n     * @param children Children of the node.\n     */ constructor(name, attribs, children = [], type = name === \"script\" ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Script : name === \"style\" ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Style : domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Tag){\n        super(children);\n        this.name = name;\n        this.attribs = attribs;\n        this.type = type;\n    }\n    get nodeType() {\n        return 1;\n    }\n    // DOM Level 1 aliases\n    /**\n     * Same as {@link name}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get tagName() {\n        return this.name;\n    }\n    set tagName(name) {\n        this.name = name;\n    }\n    get attributes() {\n        return Object.keys(this.attribs).map((name)=>{\n            var _a, _b;\n            return {\n                name,\n                value: this.attribs[name],\n                namespace: (_a = this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\n                prefix: (_b = this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name]\n            };\n        });\n    }\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */ function isTag(node) {\n    return (0,domelementtype__WEBPACK_IMPORTED_MODULE_0__.isTag)(node);\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */ function isCDATA(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.CDATA;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */ function isText(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */ function isComment(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDirective(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Directive;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDocument(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Root;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has children, `false` otherwise.\n */ function hasChildren(node) {\n    return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */ function cloneNode(node, recursive = false) {\n    let result;\n    if (isText(node)) {\n        result = new Text(node.data);\n    } else if (isComment(node)) {\n        result = new Comment(node.data);\n    } else if (isTag(node)) {\n        const children = recursive ? cloneChildren(node.children) : [];\n        const clone = new Element(node.name, {\n            ...node.attribs\n        }, children);\n        children.forEach((child)=>child.parent = clone);\n        if (node.namespace != null) {\n            clone.namespace = node.namespace;\n        }\n        if (node[\"x-attribsNamespace\"]) {\n            clone[\"x-attribsNamespace\"] = {\n                ...node[\"x-attribsNamespace\"]\n            };\n        }\n        if (node[\"x-attribsPrefix\"]) {\n            clone[\"x-attribsPrefix\"] = {\n                ...node[\"x-attribsPrefix\"]\n            };\n        }\n        result = clone;\n    } else if (isCDATA(node)) {\n        const children = recursive ? cloneChildren(node.children) : [];\n        const clone = new CDATA(children);\n        children.forEach((child)=>child.parent = clone);\n        result = clone;\n    } else if (isDocument(node)) {\n        const children = recursive ? cloneChildren(node.children) : [];\n        const clone = new Document(children);\n        children.forEach((child)=>child.parent = clone);\n        if (node[\"x-mode\"]) {\n            clone[\"x-mode\"] = node[\"x-mode\"];\n        }\n        result = clone;\n    } else if (isDirective(node)) {\n        const instruction = new ProcessingInstruction(node.name, node.data);\n        if (node[\"x-name\"] != null) {\n            instruction[\"x-name\"] = node[\"x-name\"];\n            instruction[\"x-publicId\"] = node[\"x-publicId\"];\n            instruction[\"x-systemId\"] = node[\"x-systemId\"];\n        }\n        result = instruction;\n    } else {\n        throw new Error(`Not implemented yet: ${node.type}`);\n    }\n    result.startIndex = node.startIndex;\n    result.endIndex = node.endIndex;\n    if (node.sourceCodeLocation != null) {\n        result.sourceCodeLocation = node.sourceCodeLocation;\n    }\n    return result;\n}\nfunction cloneChildren(childs) {\n    const children = childs.map((child)=>cloneNode(child, true));\n    for(let i = 1; i < children.length; i++){\n        children[i].prev = children[i - 1];\n        children[i - 1].next = children[i];\n    }\n    return children;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/domhandler/lib/esm/node.js\n");

/***/ })

};
;