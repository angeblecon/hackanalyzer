"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/peberminta";
exports.ids = ["vendor-chunks/peberminta"];
exports.modules = {

/***/ "(rsc)/../../../node_modules/peberminta/lib/core.cjs":
/*!*****************************************************!*\
  !*** ../../../node_modules/peberminta/lib/core.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar util = __webpack_require__(/*! ./util.cjs */ \"(rsc)/../../../node_modules/peberminta/lib/util.cjs\");\nfunction emit(value) {\n    return (data, i)=>({\n            matched: true,\n            position: i,\n            value: value\n        });\n}\nfunction make(f) {\n    return (data, i)=>({\n            matched: true,\n            position: i,\n            value: f(data, i)\n        });\n}\nfunction action(f) {\n    return (data, i)=>{\n        f(data, i);\n        return {\n            matched: true,\n            position: i,\n            value: null\n        };\n    };\n}\nfunction fail(data, i) {\n    return {\n        matched: false\n    };\n}\nfunction error(message) {\n    return (data, i)=>{\n        throw new Error(message instanceof Function ? message(data, i) : message);\n    };\n}\nfunction token(onToken, onEnd) {\n    return (data, i)=>{\n        let position = i;\n        let value = undefined;\n        if (i < data.tokens.length) {\n            value = onToken(data.tokens[i], data, i);\n            if (value !== undefined) {\n                position++;\n            }\n        } else {\n            onEnd?.(data, i);\n        }\n        return value === undefined ? {\n            matched: false\n        } : {\n            matched: true,\n            position: position,\n            value: value\n        };\n    };\n}\nfunction any(data, i) {\n    return i < data.tokens.length ? {\n        matched: true,\n        position: i + 1,\n        value: data.tokens[i]\n    } : {\n        matched: false\n    };\n}\nfunction satisfy(test) {\n    return (data, i)=>i < data.tokens.length && test(data.tokens[i], data, i) ? {\n            matched: true,\n            position: i + 1,\n            value: data.tokens[i]\n        } : {\n            matched: false\n        };\n}\nfunction mapInner(r, f) {\n    return r.matched ? {\n        matched: true,\n        position: r.position,\n        value: f(r.value, r.position)\n    } : r;\n}\nfunction mapOuter(r, f) {\n    return r.matched ? f(r) : r;\n}\nfunction map(p, mapper) {\n    return (data, i)=>mapInner(p(data, i), (v, j)=>mapper(v, data, i, j));\n}\nfunction map1(p, mapper) {\n    return (data, i)=>mapOuter(p(data, i), (m)=>mapper(m, data, i));\n}\nfunction peek(p, f) {\n    return (data, i)=>{\n        const r = p(data, i);\n        f(r, data, i);\n        return r;\n    };\n}\nfunction option(p, def) {\n    return (data, i)=>{\n        const r = p(data, i);\n        return r.matched ? r : {\n            matched: true,\n            position: i,\n            value: def\n        };\n    };\n}\nfunction not(p) {\n    return (data, i)=>{\n        const r = p(data, i);\n        return r.matched ? {\n            matched: false\n        } : {\n            matched: true,\n            position: i,\n            value: true\n        };\n    };\n}\nfunction choice(...ps) {\n    return (data, i)=>{\n        for (const p of ps){\n            const result = p(data, i);\n            if (result.matched) {\n                return result;\n            }\n        }\n        return {\n            matched: false\n        };\n    };\n}\nfunction otherwise(pa, pb) {\n    return (data, i)=>{\n        const r1 = pa(data, i);\n        return r1.matched ? r1 : pb(data, i);\n    };\n}\nfunction longest(...ps) {\n    return (data, i)=>{\n        let match = undefined;\n        for (const p of ps){\n            const result = p(data, i);\n            if (result.matched && (!match || match.position < result.position)) {\n                match = result;\n            }\n        }\n        return match || {\n            matched: false\n        };\n    };\n}\nfunction takeWhile(p, test) {\n    return (data, i)=>{\n        const values = [];\n        let success = true;\n        do {\n            const r = p(data, i);\n            if (r.matched && test(r.value, values.length + 1, data, i, r.position)) {\n                values.push(r.value);\n                i = r.position;\n            } else {\n                success = false;\n            }\n        }while (success);\n        return {\n            matched: true,\n            position: i,\n            value: values\n        };\n    };\n}\nfunction takeUntil(p, test) {\n    return takeWhile(p, (value, n, data, i, j)=>!test(value, n, data, i, j));\n}\nfunction takeWhileP(pValue, pTest) {\n    return takeWhile(pValue, (value, n, data, i)=>pTest(data, i).matched);\n}\nfunction takeUntilP(pValue, pTest) {\n    return takeWhile(pValue, (value, n, data, i)=>!pTest(data, i).matched);\n}\nfunction many(p) {\n    return takeWhile(p, ()=>true);\n}\nfunction many1(p) {\n    return ab(p, many(p), (head, tail)=>[\n            head,\n            ...tail\n        ]);\n}\nfunction ab(pa, pb, join) {\n    return (data, i)=>mapOuter(pa(data, i), (ma)=>mapInner(pb(data, ma.position), (vb, j)=>join(ma.value, vb, data, i, j)));\n}\nfunction left(pa, pb) {\n    return ab(pa, pb, (va)=>va);\n}\nfunction right(pa, pb) {\n    return ab(pa, pb, (va, vb)=>vb);\n}\nfunction abc(pa, pb, pc, join) {\n    return (data, i)=>mapOuter(pa(data, i), (ma)=>mapOuter(pb(data, ma.position), (mb)=>mapInner(pc(data, mb.position), (vc, j)=>join(ma.value, mb.value, vc, data, i, j))));\n}\nfunction middle(pa, pb, pc) {\n    return abc(pa, pb, pc, (ra, rb)=>rb);\n}\nfunction all(...ps) {\n    return (data, i)=>{\n        const result = [];\n        let position = i;\n        for (const p of ps){\n            const r1 = p(data, position);\n            if (r1.matched) {\n                result.push(r1.value);\n                position = r1.position;\n            } else {\n                return {\n                    matched: false\n                };\n            }\n        }\n        return {\n            matched: true,\n            position: position,\n            value: result\n        };\n    };\n}\nfunction skip(...ps) {\n    return map(all(...ps), ()=>null);\n}\nfunction flatten(...ps) {\n    return flatten1(all(...ps));\n}\nfunction flatten1(p) {\n    return map(p, (vs)=>vs.flatMap((v)=>v));\n}\nfunction sepBy1(pValue, pSep) {\n    return ab(pValue, many(right(pSep, pValue)), (head, tail)=>[\n            head,\n            ...tail\n        ]);\n}\nfunction sepBy(pValue, pSep) {\n    return otherwise(sepBy1(pValue, pSep), emit([]));\n}\nfunction chainReduce(acc, f) {\n    return (data, i)=>{\n        let loop = true;\n        let acc1 = acc;\n        let pos = i;\n        do {\n            const r = f(acc1, data, pos)(data, pos);\n            if (r.matched) {\n                acc1 = r.value;\n                pos = r.position;\n            } else {\n                loop = false;\n            }\n        }while (loop);\n        return {\n            matched: true,\n            position: pos,\n            value: acc1\n        };\n    };\n}\nfunction reduceLeft(acc, p, reducer) {\n    return chainReduce(acc, (acc)=>map(p, (v, data, i, j)=>reducer(acc, v, data, i, j)));\n}\nfunction reduceRight(p, acc, reducer) {\n    return map(many(p), (vs, data, i, j)=>vs.reduceRight((acc, v)=>reducer(v, acc, data, i, j), acc));\n}\nfunction leftAssoc1(pLeft, pOper) {\n    return chain(pLeft, (v0)=>reduceLeft(v0, pOper, (acc, f)=>f(acc)));\n}\nfunction rightAssoc1(pOper, pRight) {\n    return ab(reduceRight(pOper, (y)=>y, (f, acc)=>(y)=>f(acc(y))), pRight, (f, v)=>f(v));\n}\nfunction leftAssoc2(pLeft, pOper, pRight) {\n    return chain(pLeft, (v0)=>reduceLeft(v0, ab(pOper, pRight, (f, y)=>[\n                f,\n                y\n            ]), (acc, [f, y])=>f(acc, y)));\n}\nfunction rightAssoc2(pLeft, pOper, pRight) {\n    return ab(reduceRight(ab(pLeft, pOper, (x, f)=>[\n            x,\n            f\n        ]), (y)=>y, ([x, f], acc)=>(y)=>f(x, acc(y))), pRight, (f, v)=>f(v));\n}\nfunction condition(cond, pTrue, pFalse) {\n    return (data, i)=>cond(data, i) ? pTrue(data, i) : pFalse(data, i);\n}\nfunction decide(p) {\n    return (data, i)=>mapOuter(p(data, i), (m1)=>m1.value(data, m1.position));\n}\nfunction chain(p, f) {\n    return (data, i)=>mapOuter(p(data, i), (m1)=>f(m1.value, data, i, m1.position)(data, m1.position));\n}\nfunction ahead(p) {\n    return (data, i)=>mapOuter(p(data, i), (m1)=>({\n                matched: true,\n                position: i,\n                value: m1.value\n            }));\n}\nfunction recursive(f) {\n    return function(data, i) {\n        return f()(data, i);\n    };\n}\nfunction start(data, i) {\n    return i !== 0 ? {\n        matched: false\n    } : {\n        matched: true,\n        position: i,\n        value: true\n    };\n}\nfunction end(data, i) {\n    return i < data.tokens.length ? {\n        matched: false\n    } : {\n        matched: true,\n        position: i,\n        value: true\n    };\n}\nfunction remainingTokensNumber(data, i) {\n    return data.tokens.length - i;\n}\nfunction parserPosition(data, i, formatToken, contextTokens = 3) {\n    const len = data.tokens.length;\n    const lowIndex = util.clamp(0, i - contextTokens, len - contextTokens);\n    const highIndex = util.clamp(contextTokens, i + 1 + contextTokens, len);\n    const tokensSlice = data.tokens.slice(lowIndex, highIndex);\n    const lines = [];\n    const indexWidth = String(highIndex - 1).length + 1;\n    if (i < 0) {\n        lines.push(`${String(i).padStart(indexWidth)} >>`);\n    }\n    if (0 < lowIndex) {\n        lines.push(\"...\".padStart(indexWidth + 6));\n    }\n    for(let j = 0; j < tokensSlice.length; j++){\n        const index = lowIndex + j;\n        lines.push(`${String(index).padStart(indexWidth)} ${index === i ? \">\" : \" \"} ${util.escapeWhitespace(formatToken(tokensSlice[j]))}`);\n    }\n    if (highIndex < len) {\n        lines.push(\"...\".padStart(indexWidth + 6));\n    }\n    if (len <= i) {\n        lines.push(`${String(i).padStart(indexWidth)} >>`);\n    }\n    return lines.join(\"\\n\");\n}\nfunction parse(parser, tokens, options, formatToken = JSON.stringify) {\n    const data = {\n        tokens: tokens,\n        options: options\n    };\n    const result = parser(data, 0);\n    if (!result.matched) {\n        throw new Error(\"No match\");\n    }\n    if (result.position < data.tokens.length) {\n        throw new Error(`Partial match. Parsing stopped at:\\n${parserPosition(data, result.position, formatToken)}`);\n    }\n    return result.value;\n}\nfunction tryParse(parser, tokens, options) {\n    const result = parser({\n        tokens: tokens,\n        options: options\n    }, 0);\n    return result.matched ? result.value : undefined;\n}\nfunction match(matcher, tokens, options) {\n    const result = matcher({\n        tokens: tokens,\n        options: options\n    }, 0);\n    return result.value;\n}\nexports.ab = ab;\nexports.abc = abc;\nexports.action = action;\nexports.ahead = ahead;\nexports.all = all;\nexports.and = all;\nexports.any = any;\nexports.chain = chain;\nexports.chainReduce = chainReduce;\nexports.choice = choice;\nexports.condition = condition;\nexports.decide = decide;\nexports.discard = skip;\nexports.eitherOr = otherwise;\nexports.emit = emit;\nexports.end = end;\nexports.eof = end;\nexports.error = error;\nexports.fail = fail;\nexports.flatten = flatten;\nexports.flatten1 = flatten1;\nexports.left = left;\nexports.leftAssoc1 = leftAssoc1;\nexports.leftAssoc2 = leftAssoc2;\nexports.longest = longest;\nexports.lookAhead = ahead;\nexports.make = make;\nexports.many = many;\nexports.many1 = many1;\nexports.map = map;\nexports.map1 = map1;\nexports.match = match;\nexports.middle = middle;\nexports.not = not;\nexports.of = emit;\nexports.option = option;\nexports.or = choice;\nexports.otherwise = otherwise;\nexports.parse = parse;\nexports.parserPosition = parserPosition;\nexports.peek = peek;\nexports.recursive = recursive;\nexports.reduceLeft = reduceLeft;\nexports.reduceRight = reduceRight;\nexports.remainingTokensNumber = remainingTokensNumber;\nexports.right = right;\nexports.rightAssoc1 = rightAssoc1;\nexports.rightAssoc2 = rightAssoc2;\nexports.satisfy = satisfy;\nexports.sepBy = sepBy;\nexports.sepBy1 = sepBy1;\nexports.skip = skip;\nexports.some = many1;\nexports.start = start;\nexports.takeUntil = takeUntil;\nexports.takeUntilP = takeUntilP;\nexports.takeWhile = takeWhile;\nexports.takeWhileP = takeWhileP;\nexports.token = token;\nexports.tryParse = tryParse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../node_modules/peberminta/lib/core.cjs\n");

/***/ }),

/***/ "(rsc)/../../../node_modules/peberminta/lib/util.cjs":
/*!*****************************************************!*\
  !*** ../../../node_modules/peberminta/lib/util.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction clamp(left, x, right) {\n    return Math.max(left, Math.min(x, right));\n}\nfunction escapeWhitespace(str) {\n    return str.replace(/(\\t)|(\\r)|(\\n)/g, (m, t, r)=>t ? \"\\\\t\" : r ? \"\\\\r\" : \"\\\\n\");\n}\nexports.clamp = clamp;\nexports.escapeWhitespace = escapeWhitespace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BlYmVybWludGEvbGliL3V0aWwuY2pzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELFNBQVNDLE1BQU1DLElBQUksRUFBRUMsQ0FBQyxFQUFFQyxLQUFLO0lBQ3pCLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0osTUFBTUcsS0FBS0UsR0FBRyxDQUFDSixHQUFHQztBQUN0QztBQUNBLFNBQVNJLGlCQUFpQkMsR0FBRztJQUN6QixPQUFPQSxJQUFJQyxPQUFPLENBQUMsbUJBQW1CLENBQUNDLEdBQUdDLEdBQUdDLElBQU1ELElBQUksUUFBUUMsSUFBSSxRQUFRO0FBQy9FO0FBRUFkLGFBQWEsR0FBR0U7QUFDaEJGLHdCQUF3QixHQUFHUyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2toYXJ2YXJkLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wZWJlcm1pbnRhL2xpYi91dGlsLmNqcz85ZjY3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gY2xhbXAobGVmdCwgeCwgcmlnaHQpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobGVmdCwgTWF0aC5taW4oeCwgcmlnaHQpKTtcbn1cbmZ1bmN0aW9uIGVzY2FwZVdoaXRlc3BhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXFx0KXwoXFxyKXwoXFxuKS9nLCAobSwgdCwgcikgPT4gdCA/ICdcXFxcdCcgOiByID8gJ1xcXFxyJyA6ICdcXFxcbicpO1xufVxuXG5leHBvcnRzLmNsYW1wID0gY2xhbXA7XG5leHBvcnRzLmVzY2FwZVdoaXRlc3BhY2UgPSBlc2NhcGVXaGl0ZXNwYWNlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2xhbXAiLCJsZWZ0IiwieCIsInJpZ2h0IiwiTWF0aCIsIm1heCIsIm1pbiIsImVzY2FwZVdoaXRlc3BhY2UiLCJzdHIiLCJyZXBsYWNlIiwibSIsInQiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../../node_modules/peberminta/lib/util.cjs\n");

/***/ })

};
;